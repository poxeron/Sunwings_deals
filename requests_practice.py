# REQUESTS
#______________________________________________________________________
# Параметры запроса и передача данных
# Когда дело доходит до передачи данных на сервер или запроса конкретной информации, Requests позволяет делать это легко и непринуждённо. С помощью параметров URL или тела запроса можно передавать данные в виде ключ-значение, что открывает широкие возможности для интерактивной работы с веб-ресурсами.

# # Указываем параметры запроса в виде словаря
# params = {'key1': 'value1', 'key2': 'value2'}
# response = requests.get('https://www.example.com', params=params)
#______________________________________________________________________

# Аутентификация и безопасность
# Важным аспектом при работе с HTTP-запросами является безопасность. Requests предлагает механизмы для аутентификации, которые защищают ваши запросы и данные. Это может быть базовая аутентификация с использованием логина и пароля или, например, более сложные механизмы с использованием токенов и ключей.

# from requests.auth import HTTPBasicAuth

# # Указываем логин и пароль
# response = requests.get('https://www.example.com', auth=HTTPBasicAuth('user', 'pass'))
#______________________________________________________________________ 
# Сессии и сохранение состояния
# Иногда требуется не просто отправить одиночный запрос, а выполнить целую последовательность действий. В таких случаях на помощь приходят сессии, которые позволяют сохранять между запросами определенное состояние — куки, заголовки и так далее. Это экономит время и упрощает код, особенно при написании сложных парсеров.


#______________________________________________________________________ 

# # Создаем сессию
# with requests.Session() as s:
#     s.get('https://www.example.com/login')
#     response = s.get('https://www.example.com/data')
#______________________________________________________________________ 

#  Обработка исключений
# Сетевая работа всегда подвержена различным ошибкам и исключениям. Requests предоставляет удобные средства для обработки этих моментов. От таймаутов и отсутствия сети до ошибок на стороне сервера — зная, как с этим работать, вы сможете создать устойчивые и надёжные парсеры.

# try:
#     response = requests.get('https://www.example.com', timeout=1)
# except requests.Timeout:
#     print("Слишком долгое ожидание!")
# except requests.RequestException as e:
#     print(f"Произошла ошибка: {e}")
#______________________________________________________________________ 

# Работа с файлами и мультимедиа
# Не менее интересной является возможность работы с файлами. Загрузка изображений, аудио, видео или даже больших данных для анализа — всё это можно сделать с помощью Requests. Это открывает двери для широкого спектра задач, начиная от автоматизации рабочих процессов и заканчивая сбором данных для научных исследований.
#______________________________________________________________________ 

# # Открываем файл и отправляем его на сервер
# with open('file.txt', 'rb') as f:
#     files = {'file': f}
#     response = requests.post('https://www.example.com/upload', files=files)
#______________________________________________________________________ 
 
# Потоковая передача данных
# Для больших объемов данных или работы в реальном времени Requests предлагает потоковую передачу. Это особенно актуально для тех, кто работает с большими файлами или стриминговыми сервисами. Потоковая передача обеспечивает эффективное использование ресурсов и быстрый отклик.
#______________________________________________________________________ 

# # Загрузка файла с сервера по частям
# with requests.get('https://www.example.com/file', stream=True) as r:
#     with open('file.txt', 'wb') as f:
#         for chunk in r.iter_content(chunk_size=8192):
#             f.write(chunk)
#______________________________________________________________________ 

# Передача данных в формате JSON
# Работая с современными веб-сервисами, часто приходится сталкиваться с форматом данных JSON. Благодаря Requests, работа с JSON становится удивительно простой:
# # Отправляем данные в формате JSON
# import json
# data = {'name': 'John', 'age': 30}
# response = requests.post('https://www.example.com/api', json=data)
# #______________________________________________________________________ 

# Работа с куками
# Куки — ещё один важный аспект, с которым вы столкнётесь, работая с HTTP-запросами. Requests делает работу с куками простой и интуитивной:

# # Использование куки в сессии
# with requests.Session() as s:
#     s.get('https://www.example.com/login')
#     cookies = dict(cookies_are='working')
#     response = s.get('https://www.example.com/data', cookies=cookies)
# #______________________________________________________________________ 

# # Автоматическое следование редиректам
# Когда сервер перенаправляет ваш запрос на другой URL, Requests может автоматически следовать этим редиректам, что упрощает жизнь:

# response = requests.get('https://www.example.com/redirect', allow_redirects=True)